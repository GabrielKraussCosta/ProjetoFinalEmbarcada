

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Dec 13 18:45:23 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1,group=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1,group=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21  0000                     
    22                           ; Version 2.20
    23                           ; Generated 12/02/2020 GMT
    24                           ; 
    25                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4520 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56  0000                     
    57                           	psect	idataCOMRAM
    58  0000'                    __pidataCOMRAM:
    59                           	callstack 0
    60                           
    61                           ;initializer for _Flag
    62  0000' 01                 	db	1
    63                           
    64                           	psect	smallconst
    65  0000'                    __psmallconst:
    66                           	callstack 0
    67  0000' 00                 	db	0
    68  0001'                    STR_2:
    69  0001' 32                 	db	50	;'2'
    70  0002' 30                 	db	48	;'0'
    71  0003' 32                 	db	50	;'2'
    72  0004' 31                 	db	49	;'1'
    73  0005' 30                 	db	48	;'0'
    74  0006' 30                 	db	48	;'0'
    75  0007' 32                 	db	50	;'2'
    76  0008' 35                 	db	53	;'5'
    77  0009' 31                 	db	49	;'1'
    78  000A' 30                 	db	48	;'0'
    79  000B' 00                 	db	0
    80  000C'                    STR_1:
    81  000C' 42                 	db	66	;'B'
    82  000D' 72                 	db	114	;'r'
    83  000E' 75                 	db	117	;'u'
    84  000F' 6E                 	db	110	;'n'
    85  0010' 6F                 	db	111	;'o'
    86  0011' 00                 	db	0
    87  0012' 00                 	db	0	; dummy byte at the end
    88  0000                     
    89                           ; #config settings
    90                           
    91                           	psect	cinit
    92  0000'                    __pcinit:
    93                           	callstack 0
    94  0000'                    start_initialization:
    95                           	callstack 0
    96  0000'                    __initialization:
    97                           	callstack 0
    98                           
    99                           ; Initialize objects allocated to COMRAM (1 bytes)
   100                           ; load TBLPTR registers with __pidataCOMRAM
   101  0000' 0E00'              	movlw	low __pidataCOMRAM
   102  0002' 6EF6               	movwf	tblptrl,c
   103  0004' 0E00'              	movlw	high __pidataCOMRAM
   104  0006' 6EF7               	movwf	tblptrh,c
   105  0008' 0E00'              	movlw	low (__pidataCOMRAM shr (0+16))
   106  000A' 6EF8               	movwf	tblptru,c
   107  000C' 0009               	tblrd		*+	;fetch initializer
   108  000E' CFF5 F000'         	movff	tablat,__pdataCOMRAM
   109                           
   110                           ; Clear objects allocated to COMRAM (4 bytes)
   111  0012' 6A00'              	clrf	(__pbssCOMRAM+3)& (0+255),c
   112  0014' 6A00'              	clrf	(__pbssCOMRAM+2)& (0+255),c
   113  0016' 6A00'              	clrf	(__pbssCOMRAM+1)& (0+255),c
   114  0018' 6A00'              	clrf	__pbssCOMRAM& (0+255),c
   115  001A'                    end_of_initialization:
   116                           	callstack 0
   117  001A'                    __end_of__initialization:
   118                           	callstack 0
   119  001A' 0E00'              	movlw	low (__Lmediumconst shr (0+16))
   120  001C' 6EF8               	movwf	tblptru,c
   121  001E' 0100               	movlb	0
   122  0020' EF00' F000'        	goto	_main	;jump to C main() function
   123                           
   124                           	psect	bssCOMRAM
   125  0000'                    __pbssCOMRAM:
   126                           	callstack 0
   127  0000'                    _Leitura:
   128                           	callstack 0
   129  0000'                    	ds	2
   130  0002'                    _ValorAD:
   131                           	callstack 0
   132  0002'                    	ds	2
   133                           
   134                           	psect	dataCOMRAM
   135  0000'                    __pdataCOMRAM:
   136                           	callstack 0
   137  0000'                    _Flag:
   138                           	callstack 0
   139  0000'                    	ds	1
   140                           
   141                           	psect	cstackCOMRAM
   142  0000'                    __pcstackCOMRAM:
   143                           	callstack 0
   144  0000'                    ??_LeTeclado:
   145  0000'                    ?_kpRead:
   146  0000'                    ?_adcRead:
   147  0000'                    ?___awdiv:
   148                           	callstack 0
   149  0000'                    _ssdDigit$1:
   150                           	callstack 0
   151  0000'                    _lcdString$0:
   152                           	callstack 0
   153  0000'                    _adcRead$0:
   154                           	callstack 0
   155  0000'                    _timerReset$0:
   156                           	callstack 0
   157  0000'                    ___awdiv@dividend:
   158                           	callstack 0
   159                           
   160                           ; 2 bytes @ 0x0
   161  0000'                    	ds	2
   162  0002'                    ___awdiv@divisor:
   163                           	callstack 0
   164                           
   165                           ; 2 bytes @ 0x2
   166  0002'                    	ds	2
   167  0004'                    ___awdiv@counter:
   168                           	callstack 0
   169                           
   170                           ; 1 bytes @ 0x4
   171  0004'                    	ds	1
   172  0005'                    ___awdiv@sign:
   173                           	callstack 0
   174                           
   175                           ; 1 bytes @ 0x5
   176  0005'                    	ds	1
   177  0006'                    ___awdiv@quotient:
   178                           	callstack 0
   179                           
   180                           ; 2 bytes @ 0x6
   181  0006'                    	ds	2
   182  0008'                    ?___awmod:
   183                           	callstack 0
   184  0008'                    ___awmod@dividend:
   185                           	callstack 0
   186                           
   187                           ; 2 bytes @ 0x8
   188  0008'                    	ds	2
   189  000A'                    ___awmod@divisor:
   190                           	callstack 0
   191                           
   192                           ; 2 bytes @ 0xA
   193  000A'                    	ds	2
   194  000C'                    ___awmod@counter:
   195                           	callstack 0
   196                           
   197                           ; 1 bytes @ 0xC
   198  000C'                    	ds	1
   199  000D'                    ___awmod@sign:
   200                           	callstack 0
   201                           
   202                           ; 1 bytes @ 0xD
   203  000D'                    	ds	1
   204  000E'                    ??_Serial:
   205  000E'                    
   206                           ; 1 bytes @ 0xE
   207  000E'                    	ds	2
   208  0010'                    Serial@Tecla:
   209                           	callstack 0
   210                           
   211                           ; 1 bytes @ 0x10
   212  0010'                    	ds	1
   213  0011'                    ??_main:
   214                           
   215                           ; 1 bytes @ 0x11
   216  0011'                    	ds	2
   217  0013'                    main@slot:
   218                           	callstack 0
   219                           
   220                           ; 1 bytes @ 0x13
   221  0013'                    	ds	1
   222                           
   223 ;;
   224 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   225 ;;
   226 ;; *************** function _main *****************
   227 ;; Defined at:
   228 ;;		line 116 in file "main.c"
   229 ;; Parameters:    Size  Location     Type
   230 ;;		None
   231 ;; Auto vars:     Size  Location     Type
   232 ;;  slot            1   19[COMRAM] unsigned char 
   233 ;; Return value:  Size  Location     Type
   234 ;;                  1    wreg      void 
   235 ;; Registers used:
   236 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, btemp+14, btemp+15
      +, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, btemp+26, btemp+27
      +, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   237 ;; Tracked objects:
   238 ;;		On entry : 0/0
   239 ;;		On exit  : 0/0
   240 ;;		Unchanged: 0/0
   241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   242 ;;      Params:         0       0       0       0       0       0       0
   243 ;;      Locals:         1       0       0       0       0       0       0
   244 ;;      Temps:          2       0       0       0       0       0       0
   245 ;;      Totals:         3       0       0       0       0       0       0
   246 ;;Total ram usage:        3 bytes
   247 ;; Hardware stack levels required when called: 2
   248 ;; This function calls:
   249 ;;		_LeTeclado
   250 ;;		_MostraDisplay
   251 ;;		_Serial
   252 ;;		_adcInit
   253 ;;		_kpDebounce
   254 ;;		_kpInit
   255 ;;		_lcdCommand
   256 ;;		_lcdInit
   257 ;;		_serialInit
   258 ;;		_ssdDigit
   259 ;;		_ssdInit
   260 ;;		_ssdUpdate
   261 ;;		_timerInit
   262 ;;		_timerReset
   263 ;;		_timerWait
   264 ;; This function is called by:
   265 ;;		Startup code after reset
   266 ;; This function uses a non-reentrant model
   267 ;;
   268                           
   269                           	psect	text0
   270  0000'                    __ptext0:
   271                           	callstack 0
   272  0000'                    _main:
   273                           	callstack 29
   274  0000'                    
   275                           ;main.c: 117:     char slot;;main.c: 119:     kpInit();
   276  0000' EC00' F000'        	call	_kpInit	;wreg free
   277                           
   278                           ;main.c: 120:     adcInit();
   279  0004' EC00' F000'        	call	_adcInit	;wreg free
   280                           
   281                           ;main.c: 121:     lcdInit();
   282  0008' EC00' F000'        	call	_lcdInit	;wreg free
   283                           
   284                           ;main.c: 122:     ssdInit();
   285  000C' EC00' F000'        	call	_ssdInit	;wreg free
   286                           
   287                           ;main.c: 123:     timerInit();
   288  0010' EC00' F000'        	call	_timerInit	;wreg free
   289                           
   290                           ;main.c: 124:     serialInit();
   291  0014' EC00' F000'        	call	_serialInit	;wreg free
   292                           
   293                           ;main.c: 126:     ssdDigit(16, 0);
   294  0018' 0E00               	movlw	0
   295  001A' 6E00'              	movwf	_ssdDigit$1^0,c
   296  001C' 0E10               	movlw	16
   297  001E' EC00' F000'        	call	_ssdDigit
   298                           
   299                           ;main.c: 127:     ssdDigit(16, 1);
   300  0022' 0E01               	movlw	1
   301  0024' 6E00'              	movwf	_ssdDigit$1^0,c
   302  0026' 0E10               	movlw	16
   303  0028' EC00' F000'        	call	_ssdDigit
   304                           
   305                           ;main.c: 128:     ssdDigit(16, 2);
   306  002C' 0E02               	movlw	2
   307  002E' 6E00'              	movwf	_ssdDigit$1^0,c
   308  0030' 0E10               	movlw	16
   309  0032' EC00' F000'        	call	_ssdDigit
   310                           
   311                           ;main.c: 129:     ssdDigit(16, 3);
   312  0036' 0E03               	movlw	3
   313  0038' 6E00'              	movwf	_ssdDigit$1^0,c
   314  003A' 0E10               	movlw	16
   315  003C' EC00' F000'        	call	_ssdDigit
   316                           
   317                           ;main.c: 131:     lcdCommand(0x01);
   318  0040' 0E01               	movlw	1
   319  0042' EC00' F000'        	call	_lcdCommand
   320  0046'                    l74:
   321                           
   322                           ;main.c: 134:         timerReset(5000);
   323  0046' 0E13               	movlw	19
   324  0048' 6E00'              	movwf	(_timerReset$0+1)^0,c
   325  004A' 0E88               	movlw	136
   326  004C' 6E00'              	movwf	_timerReset$0^0,c
   327  004E' EC00' F000'        	call	_timerReset	;wreg free
   328                           
   329                           ;main.c: 135:         ssdUpdate();
   330  0052' EC00' F000'        	call	_ssdUpdate	;wreg free
   331                           
   332                           ;main.c: 137:         switch(slot){
   333  0056' EF00' F000'        	goto	l1152
   334  005A'                    l1130:
   335                           
   336                           ;main.c: 139:                 LeTeclado();
   337  005A' EC00' F000'        	call	_LeTeclado	;wreg free
   338  005E'                    
   339                           ;main.c: 140:                 slot = 1;
   340  005E' 0E01               	movlw	1
   341  0060' 6E00'              	movwf	main@slot^0,c
   342                           
   343                           ;main.c: 141:                 break;
   344  0062' EF00' F000'        	goto	l1154
   345  0066'                    l1134:
   346                           
   347                           ;main.c: 143:                 Serial();
   348  0066' EC00' F000'        	call	_Serial	;wreg free
   349  006A'                    
   350                           ;main.c: 144:                 slot = 2;
   351  006A' 0E02               	movlw	2
   352  006C' 6E00'              	movwf	main@slot^0,c
   353                           
   354                           ;main.c: 145:                 break;
   355  006E' EF00' F000'        	goto	l1154
   356  0072'                    l1138:
   357                           
   358                           ;main.c: 147:                 kpDebounce();
   359  0072' EC00' F000'        	call	_kpDebounce	;wreg free
   360  0076'                    
   361                           ;main.c: 148:                 slot = 3;
   362  0076' 0E03               	movlw	3
   363  0078' 6E00'              	movwf	main@slot^0,c
   364                           
   365                           ;main.c: 149:                 break;
   366  007A' EF00' F000'        	goto	l1154
   367  007E'                    l1142:
   368                           
   369                           ;main.c: 151:                 if(Flag == 1){
   370  007E' 0400'              	decf	_Flag^0,w,c
   371  0080' A4D8               	btfss	status,2,c
   372  0082' EF00' F000'        	goto	u301
   373  0086' EF00' F000'        	goto	u300
   374  008A'                    u301:
   375  008A' EF00' F000'        	goto	l1146
   376  008E'                    u300:
   377  008E'                    
   378                           ;main.c: 152:                     MostraDisplay();
   379  008E' EC00' F000'        	call	_MostraDisplay	;wreg free
   380  0092'                    l1146:
   381                           
   382                           ;main.c: 155:                 slot = 0;
   383  0092' 0E00               	movlw	0
   384  0094' 6E00'              	movwf	main@slot^0,c
   385                           
   386                           ;main.c: 156:                 break;
   387  0096' EF00' F000'        	goto	l1154
   388  009A'                    l1152:
   389  009A' 5000'              	movf	main@slot^0,w,c
   390  009C' 6E00'              	movwf	??_main^0,c
   391  009E' 6A00'              	clrf	(??_main+1)^0,c
   392                           
   393                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   394                           ; Switch size 1, requested type "simple"
   395                           ; Number of cases is 1, Range of values is 0 to 0
   396                           ; switch strategies available:
   397                           ; Name         Instructions Cycles
   398                           ; simple_byte            4     3 (average)
   399                           ;	Chosen strategy is simple_byte
   400  00A0' 5000'              	movf	(??_main+1)^0,w,c
   401  00A2' 0A00               	xorlw	0	; case 0
   402  00A4' B4D8               	btfsc	status,2,c
   403  00A6' EF00' F000'        	goto	l1172
   404  00AA' EF00' F000'        	goto	l1146
   405  00AE'                    l1172:
   406                           
   407                           ; Switch size 1, requested type "simple"
   408                           ; Number of cases is 4, Range of values is 0 to 3
   409                           ; switch strategies available:
   410                           ; Name         Instructions Cycles
   411                           ; simple_byte           13     7 (average)
   412                           ;	Chosen strategy is simple_byte
   413  00AE' 5000'              	movf	??_main^0,w,c
   414  00B0' 0A00               	xorlw	0	; case 0
   415  00B2' B4D8               	btfsc	status,2,c
   416  00B4' EF00' F000'        	goto	l1130
   417  00B8' 0A01               	xorlw	1	; case 1
   418  00BA' B4D8               	btfsc	status,2,c
   419  00BC' EF00' F000'        	goto	l1134
   420  00C0' 0A03               	xorlw	3	; case 2
   421  00C2' B4D8               	btfsc	status,2,c
   422  00C4' EF00' F000'        	goto	l1138
   423  00C8' 0A01               	xorlw	1	; case 3
   424  00CA' B4D8               	btfsc	status,2,c
   425  00CC' EF00' F000'        	goto	l1142
   426  00D0' EF00' F000'        	goto	l1146
   427  00D4'                    l1154:
   428                           
   429                           ;main.c: 162:         timerWait();
   430  00D4' EC00' F000'        	call	_timerWait	;wreg free
   431                           
   432                           ;main.c: 163:     }
   433  00D8' EF00' F000'        	goto	l74
   434  00DC' EF00' F000'        	goto	start
   435  00E0'                    __end_of_main:
   436                           	callstack 0
   437                           
   438 ;; *************** function _Serial *****************
   439 ;; Defined at:
   440 ;;		line 58 in file "main.c"
   441 ;; Parameters:    Size  Location     Type
   442 ;;		None
   443 ;; Auto vars:     Size  Location     Type
   444 ;;  Tecla           1   16[COMRAM] unsigned char 
   445 ;; Return value:  Size  Location     Type
   446 ;;                  1    wreg      void 
   447 ;; Registers used:
   448 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, btemp+14, btemp+15
      +, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, btemp+26, btemp+27
      +, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   449 ;; Tracked objects:
   450 ;;		On entry : 0/0
   451 ;;		On exit  : 0/0
   452 ;;		Unchanged: 0/0
   453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   454 ;;      Params:         0       0       0       0       0       0       0
   455 ;;      Locals:         1       0       0       0       0       0       0
   456 ;;      Temps:          2       0       0       0       0       0       0
   457 ;;      Totals:         3       0       0       0       0       0       0
   458 ;;Total ram usage:        3 bytes
   459 ;; Hardware stack levels used: 1
   460 ;; Hardware stack levels required when called: 1
   461 ;; This function calls:
   462 ;;		___awdiv
   463 ;;		___awmod
   464 ;;		_adcRead
   465 ;;		_lcdCommand
   466 ;;		_lcdString
   467 ;;		_serialRead
   468 ;;		_serialSend
   469 ;;		_ssdDigit
   470 ;; This function is called by:
   471 ;;		_main
   472 ;; This function uses a non-reentrant model
   473 ;;
   474                           
   475                           	psect	text1
   476  0000'                    __ptext1:
   477                           	callstack 0
   478  0000'                    _Serial:
   479                           	callstack 29
   480  0000'                    
   481                           ;main.c: 59:     char Tecla;;main.c: 61:     Tecla = serialRead();
   482  0000' EC00' F000'        	call	_serialRead	;wreg free
   483  0004' 6E00'              	movwf	Serial@Tecla^0,c
   484  0006'                    
   485                           ;main.c: 63:     if(Tecla != 0){
   486  0006' 5000'              	movf	Serial@Tecla^0,w,c
   487  0008' B4D8               	btfsc	status,2,c
   488  000A' EF00' F000'        	goto	u291
   489  000E' EF00' F000'        	goto	u290
   490  0012'                    u291:
   491  0012' EF00' F000'        	goto	l1120
   492  0016'                    u290:
   493  0016' EF00' F000'        	goto	l1118
   494  001A'                    l1090:
   495                           
   496                           ;main.c: 66:                 lcdCommand(0x80);
   497  001A' 0E80               	movlw	128
   498  001C' EC00' F000'        	call	_lcdCommand
   499                           
   500                           ;main.c: 67:                 lcdString("Bruno");
   501  0020' 0E00'              	movlw	low STR_1
   502  0022' 6E00'              	movwf	_lcdString$0^0,c
   503  0024' 0E00'              	movlw	high STR_1
   504  0026' 6E00'              	movwf	(_lcdString$0+1)^0,c
   505  0028' EC00' F000'        	call	_lcdString	;wreg free
   506                           
   507                           ;main.c: 68:                 break;
   508  002C' EF00' F000'        	goto	l1120
   509  0030'                    l1092:
   510                           
   511                           ;main.c: 70:                 lcdCommand(0xC0);
   512  0030' 0EC0               	movlw	192
   513  0032' EC00' F000'        	call	_lcdCommand
   514                           
   515                           ;main.c: 71:                 lcdString("2021002510");
   516  0036' 0E00'              	movlw	low STR_2
   517  0038' 6E00'              	movwf	_lcdString$0^0,c
   518  003A' 0E00'              	movlw	high STR_2
   519  003C' 6E00'              	movwf	(_lcdString$0+1)^0,c
   520  003E' EC00' F000'        	call	_lcdString	;wreg free
   521                           
   522                           ;main.c: 72:                 break;
   523  0042' EF00' F000'        	goto	l1120
   524  0046'                    l1094:
   525                           
   526                           ;main.c: 74:                 Flag = 2;
   527  0046' 0E02               	movlw	2
   528  0048' 6E00'              	movwf	_Flag^0,c
   529  004A'                    
   530                           ;main.c: 76:                 ssdDigit(14, 0);
   531  004A' 0E00               	movlw	0
   532  004C' 6E00'              	movwf	_ssdDigit$1^0,c
   533  004E' 0E0E               	movlw	14
   534  0050' EC00' F000'        	call	_ssdDigit
   535  0054'                    
   536                           ;main.c: 77:                 ssdDigit(12, 1);
   537  0054' 0E01               	movlw	1
   538  0056' 6E00'              	movwf	_ssdDigit$1^0,c
   539  0058' 0E0C               	movlw	12
   540  005A' EC00' F000'        	call	_ssdDigit
   541  005E'                    
   542                           ;main.c: 78:                 ssdDigit( 0, 2);
   543  005E' 0E02               	movlw	2
   544  0060' 6E00'              	movwf	_ssdDigit$1^0,c
   545  0062' 0E00               	movlw	0
   546  0064' EC00' F000'        	call	_ssdDigit
   547  0068'                    
   548                           ;main.c: 79:                 ssdDigit(16, 3);
   549  0068' 0E03               	movlw	3
   550  006A' 6E00'              	movwf	_ssdDigit$1^0,c
   551  006C' 0E10               	movlw	16
   552  006E' EC00' F000'        	call	_ssdDigit
   553                           
   554                           ;main.c: 80:                 break;
   555  0072' EF00' F000'        	goto	l1120
   556  0076'                    l1104:
   557                           
   558                           ;main.c: 82:                 Flag = 1;
   559  0076' 0E01               	movlw	1
   560  0078' 6E00'              	movwf	_Flag^0,c
   561  007A'                    
   562                           ;main.c: 84:                 ssdDigit(16, 0);
   563  007A' 0E00               	movlw	0
   564  007C' 6E00'              	movwf	_ssdDigit$1^0,c
   565  007E' 0E10               	movlw	16
   566  0080' EC00' F000'        	call	_ssdDigit
   567  0084'                    
   568                           ;main.c: 85:                 ssdDigit(16, 1);
   569  0084' 0E01               	movlw	1
   570  0086' 6E00'              	movwf	_ssdDigit$1^0,c
   571  0088' 0E10               	movlw	16
   572  008A' EC00' F000'        	call	_ssdDigit
   573  008E'                    
   574                           ;main.c: 86:                 ssdDigit(16, 2);
   575  008E' 0E02               	movlw	2
   576  0090' 6E00'              	movwf	_ssdDigit$1^0,c
   577  0092' 0E10               	movlw	16
   578  0094' EC00' F000'        	call	_ssdDigit
   579  0098'                    
   580                           ;main.c: 87:                 ssdDigit(16, 3);
   581  0098' 0E03               	movlw	3
   582  009A' 6E00'              	movwf	_ssdDigit$1^0,c
   583  009C' 0E10               	movlw	16
   584  009E' EC00' F000'        	call	_ssdDigit
   585                           
   586                           ;main.c: 88:                 break;
   587  00A2' EF00' F000'        	goto	l1120
   588  00A6'                    l1114:
   589                           
   590                           ;main.c: 90:                 lcdCommand(0x01);
   591  00A6' 0E01               	movlw	1
   592  00A8' EC00' F000'        	call	_lcdCommand
   593                           
   594                           ;main.c: 91:                 break;
   595  00AC' EF00' F000'        	goto	l1120
   596  00B0'                    l1118:
   597  00B0' 5000'              	movf	Serial@Tecla^0,w,c
   598  00B2' 6E00'              	movwf	??_Serial^0,c
   599  00B4' 6A00'              	clrf	(??_Serial+1)^0,c
   600                           
   601                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   602                           ; Switch size 1, requested type "simple"
   603                           ; Number of cases is 1, Range of values is 0 to 0
   604                           ; switch strategies available:
   605                           ; Name         Instructions Cycles
   606                           ; simple_byte            4     3 (average)
   607                           ;	Chosen strategy is simple_byte
   608  00B6' 5000'              	movf	(??_Serial+1)^0,w,c
   609  00B8' 0A00               	xorlw	0	; case 0
   610  00BA' B4D8               	btfsc	status,2,c
   611  00BC' EF00' F000'        	goto	l1174
   612  00C0' EF00' F000'        	goto	l1120
   613  00C4'                    l1174:
   614                           
   615                           ; Switch size 1, requested type "simple"
   616                           ; Number of cases is 5, Range of values is 68 to 85
   617                           ; switch strategies available:
   618                           ; Name         Instructions Cycles
   619                           ; simple_byte           16     9 (average)
   620                           ;	Chosen strategy is simple_byte
   621  00C4' 5000'              	movf	??_Serial^0,w,c
   622  00C6' 0A44               	xorlw	68	; case 68
   623  00C8' B4D8               	btfsc	status,2,c
   624  00CA' EF00' F000'        	goto	l1094
   625  00CE' 0A08               	xorlw	8	; case 76
   626  00D0' B4D8               	btfsc	status,2,c
   627  00D2' EF00' F000'        	goto	l1092
   628  00D6' 0A1E               	xorlw	30	; case 82
   629  00D8' B4D8               	btfsc	status,2,c
   630  00DA' EF00' F000'        	goto	l1104
   631  00DE' 0A01               	xorlw	1	; case 83
   632  00E0' B4D8               	btfsc	status,2,c
   633  00E2' EF00' F000'        	goto	l1114
   634  00E6' 0A06               	xorlw	6	; case 85
   635  00E8' B4D8               	btfsc	status,2,c
   636  00EA' EF00' F000'        	goto	l1090
   637  00EE' EF00' F000'        	goto	l1120
   638  00F2'                    l1120:
   639                           
   640                           ;main.c: 97:     ValorAD = adcRead(0);
   641  00F2' 0E00               	movlw	0
   642  00F4' 6E00'              	movwf	(_adcRead$0+1)^0,c
   643  00F6' 0E00               	movlw	0
   644  00F8' 6E00'              	movwf	_adcRead$0^0,c
   645  00FA' EC00' F000'        	call	_adcRead	;wreg free
   646  00FE' C000' F002'        	movff	?_adcRead,_ValorAD
   647  0102' C001' F003'        	movff	?_adcRead+1,_ValorAD+1
   648                           
   649                           ;main.c: 99:     serialSend('T');
   650  0106' 0E54               	movlw	84
   651  0108' EC00' F000'        	call	_serialSend
   652                           
   653                           ;main.c: 100:     serialSend(':');
   654  010C' 0E3A               	movlw	58
   655  010E' EC00' F000'        	call	_serialSend
   656                           
   657                           ;main.c: 101:     serialSend(' ');
   658  0112' 0E20               	movlw	32
   659  0114' EC00' F000'        	call	_serialSend
   660                           
   661                           ;main.c: 102:     serialSend((ValorAD/1000) % 10 + '0');
   662  0118' 0E03               	movlw	3
   663  011A' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
   664  011C' 0EE8               	movlw	232
   665  011E' 6E00'              	movwf	___awdiv@divisor^0,c
   666  0120' C002' F000'        	movff	_ValorAD,___awdiv@dividend
   667  0124' C003' F001'        	movff	_ValorAD+1,___awdiv@dividend+1
   668  0128' EC00' F000'        	call	___awdiv	;wreg free
   669  012C' C000' F008'        	movff	?___awdiv,___awmod@dividend
   670  0130' C001' F009'        	movff	?___awdiv+1,___awmod@dividend+1
   671  0134' 0E00               	movlw	0
   672  0136' 6E00'              	movwf	(___awmod@divisor+1)^0,c
   673  0138' 0E0A               	movlw	10
   674  013A' 6E00'              	movwf	___awmod@divisor^0,c
   675  013C' EC00' F000'        	call	___awmod	;wreg free
   676  0140' 5000'              	movf	?___awmod^0,w,c
   677  0142' 0F30               	addlw	48
   678  0144' EC00' F000'        	call	_serialSend
   679                           
   680                           ;main.c: 103:     serialSend((ValorAD/100) % 10 + '0');
   681  0148' 0E00               	movlw	0
   682  014A' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
   683  014C' 0E64               	movlw	100
   684  014E' 6E00'              	movwf	___awdiv@divisor^0,c
   685  0150' C002' F000'        	movff	_ValorAD,___awdiv@dividend
   686  0154' C003' F001'        	movff	_ValorAD+1,___awdiv@dividend+1
   687  0158' EC00' F000'        	call	___awdiv	;wreg free
   688  015C' C000' F008'        	movff	?___awdiv,___awmod@dividend
   689  0160' C001' F009'        	movff	?___awdiv+1,___awmod@dividend+1
   690  0164' 0E00               	movlw	0
   691  0166' 6E00'              	movwf	(___awmod@divisor+1)^0,c
   692  0168' 0E0A               	movlw	10
   693  016A' 6E00'              	movwf	___awmod@divisor^0,c
   694  016C' EC00' F000'        	call	___awmod	;wreg free
   695  0170' 5000'              	movf	?___awmod^0,w,c
   696  0172' 0F30               	addlw	48
   697  0174' EC00' F000'        	call	_serialSend
   698                           
   699                           ;main.c: 104:     serialSend((ValorAD/10) % 10 + '0');
   700  0178' 0E00               	movlw	0
   701  017A' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
   702  017C' 0E0A               	movlw	10
   703  017E' 6E00'              	movwf	___awdiv@divisor^0,c
   704  0180' C002' F000'        	movff	_ValorAD,___awdiv@dividend
   705  0184' C003' F001'        	movff	_ValorAD+1,___awdiv@dividend+1
   706  0188' EC00' F000'        	call	___awdiv	;wreg free
   707  018C' C000' F008'        	movff	?___awdiv,___awmod@dividend
   708  0190' C001' F009'        	movff	?___awdiv+1,___awmod@dividend+1
   709  0194' 0E00               	movlw	0
   710  0196' 6E00'              	movwf	(___awmod@divisor+1)^0,c
   711  0198' 0E0A               	movlw	10
   712  019A' 6E00'              	movwf	___awmod@divisor^0,c
   713  019C' EC00' F000'        	call	___awmod	;wreg free
   714  01A0' 5000'              	movf	?___awmod^0,w,c
   715  01A2' 0F30               	addlw	48
   716  01A4' EC00' F000'        	call	_serialSend
   717                           
   718                           ;main.c: 105:     serialSend((ValorAD/1) % 10 + '0');
   719  01A8' C002' F008'        	movff	_ValorAD,___awmod@dividend
   720  01AC' C003' F009'        	movff	_ValorAD+1,___awmod@dividend+1
   721  01B0' 0E00               	movlw	0
   722  01B2' 6E00'              	movwf	(___awmod@divisor+1)^0,c
   723  01B4' 0E0A               	movlw	10
   724  01B6' 6E00'              	movwf	___awmod@divisor^0,c
   725  01B8' EC00' F000'        	call	___awmod	;wreg free
   726  01BC' 5000'              	movf	?___awmod^0,w,c
   727  01BE' 0F30               	addlw	48
   728  01C0' EC00' F000'        	call	_serialSend
   729                           
   730                           ;main.c: 106:     serialSend('\n');
   731  01C4' 0E0A               	movlw	10
   732  01C6' EC00' F000'        	call	_serialSend
   733  01CA' 0012               	return		;funcret
   734  01CC'                    __end_of_Serial:
   735                           	callstack 0
   736                           
   737 ;; *************** function _MostraDisplay *****************
   738 ;; Defined at:
   739 ;;		line 109 in file "main.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;		None
   742 ;; Auto vars:     Size  Location     Type
   743 ;;		None
   744 ;; Return value:  Size  Location     Type
   745 ;;                  1    wreg      void 
   746 ;; Registers used:
   747 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, btemp+14, btemp+15
      +, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, btemp+26, btemp+27
      +, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
   748 ;; Tracked objects:
   749 ;;		On entry : 0/0
   750 ;;		On exit  : 0/0
   751 ;;		Unchanged: 0/0
   752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   753 ;;      Params:         0       0       0       0       0       0       0
   754 ;;      Locals:         0       0       0       0       0       0       0
   755 ;;      Temps:          0       0       0       0       0       0       0
   756 ;;      Totals:         0       0       0       0       0       0       0
   757 ;;Total ram usage:        0 bytes
   758 ;; Hardware stack levels used: 1
   759 ;; Hardware stack levels required when called: 1
   760 ;; This function calls:
   761 ;;		___awdiv
   762 ;;		___awmod
   763 ;;		_ssdDigit
   764 ;; This function is called by:
   765 ;;		_main
   766 ;; This function uses a non-reentrant model
   767 ;;
   768                           
   769                           	psect	text2
   770  0000'                    __ptext2:
   771                           	callstack 0
   772  0000'                    _MostraDisplay:
   773                           	callstack 29
   774  0000'                    
   775                           ;main.c: 110:     ssdDigit((ValorAD/1000) % 10, 0);
   776  0000' 0E00               	movlw	0
   777  0002' 6E00'              	movwf	_ssdDigit$1^0,c
   778  0004' 0E03               	movlw	3
   779  0006' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
   780  0008' 0EE8               	movlw	232
   781  000A' 6E00'              	movwf	___awdiv@divisor^0,c
   782  000C' C002' F000'        	movff	_ValorAD,___awdiv@dividend
   783  0010' C003' F001'        	movff	_ValorAD+1,___awdiv@dividend+1
   784  0014' EC00' F000'        	call	___awdiv	;wreg free
   785  0018' C000' F008'        	movff	?___awdiv,___awmod@dividend
   786  001C' C001' F009'        	movff	?___awdiv+1,___awmod@dividend+1
   787  0020' 0E00               	movlw	0
   788  0022' 6E00'              	movwf	(___awmod@divisor+1)^0,c
   789  0024' 0E0A               	movlw	10
   790  0026' 6E00'              	movwf	___awmod@divisor^0,c
   791  0028' EC00' F000'        	call	___awmod	;wreg free
   792  002C' 5000'              	movf	?___awmod^0,w,c
   793  002E' EC00' F000'        	call	_ssdDigit
   794                           
   795                           ;main.c: 111:     ssdDigit((ValorAD/100) % 10, 1);
   796  0032' 0E01               	movlw	1
   797  0034' 6E00'              	movwf	_ssdDigit$1^0,c
   798  0036' 0E00               	movlw	0
   799  0038' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
   800  003A' 0E64               	movlw	100
   801  003C' 6E00'              	movwf	___awdiv@divisor^0,c
   802  003E' C002' F000'        	movff	_ValorAD,___awdiv@dividend
   803  0042' C003' F001'        	movff	_ValorAD+1,___awdiv@dividend+1
   804  0046' EC00' F000'        	call	___awdiv	;wreg free
   805  004A' C000' F008'        	movff	?___awdiv,___awmod@dividend
   806  004E' C001' F009'        	movff	?___awdiv+1,___awmod@dividend+1
   807  0052' 0E00               	movlw	0
   808  0054' 6E00'              	movwf	(___awmod@divisor+1)^0,c
   809  0056' 0E0A               	movlw	10
   810  0058' 6E00'              	movwf	___awmod@divisor^0,c
   811  005A' EC00' F000'        	call	___awmod	;wreg free
   812  005E' 5000'              	movf	?___awmod^0,w,c
   813  0060' EC00' F000'        	call	_ssdDigit
   814                           
   815                           ;main.c: 112:     ssdDigit((ValorAD/10) % 10, 2);
   816  0064' 0E02               	movlw	2
   817  0066' 6E00'              	movwf	_ssdDigit$1^0,c
   818  0068' 0E00               	movlw	0
   819  006A' 6E00'              	movwf	(___awdiv@divisor+1)^0,c
   820  006C' 0E0A               	movlw	10
   821  006E' 6E00'              	movwf	___awdiv@divisor^0,c
   822  0070' C002' F000'        	movff	_ValorAD,___awdiv@dividend
   823  0074' C003' F001'        	movff	_ValorAD+1,___awdiv@dividend+1
   824  0078' EC00' F000'        	call	___awdiv	;wreg free
   825  007C' C000' F008'        	movff	?___awdiv,___awmod@dividend
   826  0080' C001' F009'        	movff	?___awdiv+1,___awmod@dividend+1
   827  0084' 0E00               	movlw	0
   828  0086' 6E00'              	movwf	(___awmod@divisor+1)^0,c
   829  0088' 0E0A               	movlw	10
   830  008A' 6E00'              	movwf	___awmod@divisor^0,c
   831  008C' EC00' F000'        	call	___awmod	;wreg free
   832  0090' 5000'              	movf	?___awmod^0,w,c
   833  0092' EC00' F000'        	call	_ssdDigit
   834                           
   835                           ;main.c: 113:     ssdDigit((ValorAD/1) % 10, 3);
   836  0096' 0E03               	movlw	3
   837  0098' 6E00'              	movwf	_ssdDigit$1^0,c
   838  009A' C002' F008'        	movff	_ValorAD,___awmod@dividend
   839  009E' C003' F009'        	movff	_ValorAD+1,___awmod@dividend+1
   840  00A2' 0E00               	movlw	0
   841  00A4' 6E00'              	movwf	(___awmod@divisor+1)^0,c
   842  00A6' 0E0A               	movlw	10
   843  00A8' 6E00'              	movwf	___awmod@divisor^0,c
   844  00AA' EC00' F000'        	call	___awmod	;wreg free
   845  00AE' 5000'              	movf	?___awmod^0,w,c
   846  00B0' EC00' F000'        	call	_ssdDigit
   847  00B4' 0012               	return		;funcret
   848  00B6'                    __end_of_MostraDisplay:
   849                           	callstack 0
   850                           
   851 ;; *************** function ___awmod *****************
   852 ;; Defined at:
   853 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awmod.c"
   854 ;; Parameters:    Size  Location     Type
   855 ;;  dividend        2    8[COMRAM] int 
   856 ;;  divisor         2   10[COMRAM] int 
   857 ;; Auto vars:     Size  Location     Type
   858 ;;  sign            1   13[COMRAM] unsigned char 
   859 ;;  counter         1   12[COMRAM] unsigned char 
   860 ;; Return value:  Size  Location     Type
   861 ;;                  2    8[COMRAM] int 
   862 ;; Registers used:
   863 ;;		wreg, status,2, status,0
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   869 ;;      Params:         4       0       0       0       0       0       0
   870 ;;      Locals:         2       0       0       0       0       0       0
   871 ;;      Temps:          0       0       0       0       0       0       0
   872 ;;      Totals:         6       0       0       0       0       0       0
   873 ;;Total ram usage:        6 bytes
   874 ;; Hardware stack levels used: 1
   875 ;; This function calls:
   876 ;;		Nothing
   877 ;; This function is called by:
   878 ;;		_Serial
   879 ;;		_MostraDisplay
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           	psect	text3
   884  0000'                    __ptext3:
   885                           	callstack 0
   886  0000'                    ___awmod:
   887                           	callstack 29
   888  0000' 0E00               	movlw	0
   889  0002' 6E00'              	movwf	___awmod@sign^0,c
   890  0004' BE00'              	btfsc	(___awmod@dividend+1)^0,7,c
   891  0006' EF00' F000'        	goto	u220
   892  000A' EF00' F000'        	goto	u221
   893  000E'                    u221:
   894  000E' EF00' F000'        	goto	l1018
   895  0012'                    u220:
   896  0012' 6C00'              	negf	___awmod@dividend^0,c
   897  0014' 1E00'              	comf	(___awmod@dividend+1)^0,f,c
   898  0016' B0D8               	btfsc	status,0,c
   899  0018' 2A00'              	incf	(___awmod@dividend+1)^0,f,c
   900  001A' 0E01               	movlw	1
   901  001C' 6E00'              	movwf	___awmod@sign^0,c
   902  001E'                    l1018:
   903  001E' BE00'              	btfsc	(___awmod@divisor+1)^0,7,c
   904  0020' EF00' F000'        	goto	u230
   905  0024' EF00' F000'        	goto	u231
   906  0028'                    u231:
   907  0028' EF00' F000'        	goto	l1022
   908  002C'                    u230:
   909  002C' 6C00'              	negf	___awmod@divisor^0,c
   910  002E' 1E00'              	comf	(___awmod@divisor+1)^0,f,c
   911  0030' B0D8               	btfsc	status,0,c
   912  0032' 2A00'              	incf	(___awmod@divisor+1)^0,f,c
   913  0034'                    l1022:
   914  0034' 5000'              	movf	___awmod@divisor^0,w,c
   915  0036' 1000'              	iorwf	(___awmod@divisor+1)^0,w,c
   916  0038' B4D8               	btfsc	status,2,c
   917  003A' EF00' F000'        	goto	u241
   918  003E' EF00' F000'        	goto	u240
   919  0042'                    u241:
   920  0042' EF00' F000'        	goto	l1038
   921  0046'                    u240:
   922  0046' 0E01               	movlw	1
   923  0048' 6E00'              	movwf	___awmod@counter^0,c
   924  004A' EF00' F000'        	goto	l1028
   925  004E'                    l1026:
   926  004E' 90D8               	bcf	status,0,c
   927  0050' 3600'              	rlcf	___awmod@divisor^0,f,c
   928  0052' 3600'              	rlcf	(___awmod@divisor+1)^0,f,c
   929  0054' 2A00'              	incf	___awmod@counter^0,f,c
   930  0056'                    l1028:
   931  0056' AE00'              	btfss	(___awmod@divisor+1)^0,7,c
   932  0058' EF00' F000'        	goto	u251
   933  005C' EF00' F000'        	goto	u250
   934  0060'                    u251:
   935  0060' EF00' F000'        	goto	l1026
   936  0064'                    u250:
   937  0064'                    l1030:
   938  0064' 5000'              	movf	___awmod@divisor^0,w,c
   939  0066' 5C00'              	subwf	___awmod@dividend^0,w,c
   940  0068' 5000'              	movf	(___awmod@divisor+1)^0,w,c
   941  006A' 5800'              	subwfb	(___awmod@dividend+1)^0,w,c
   942  006C' A0D8               	btfss	status,0,c
   943  006E' EF00' F000'        	goto	u261
   944  0072' EF00' F000'        	goto	u260
   945  0076'                    u261:
   946  0076' EF00' F000'        	goto	l1034
   947  007A'                    u260:
   948  007A' 5000'              	movf	___awmod@divisor^0,w,c
   949  007C' 5E00'              	subwf	___awmod@dividend^0,f,c
   950  007E' 5000'              	movf	(___awmod@divisor+1)^0,w,c
   951  0080' 5A00'              	subwfb	(___awmod@dividend+1)^0,f,c
   952  0082'                    l1034:
   953  0082' 90D8               	bcf	status,0,c
   954  0084' 3200'              	rrcf	(___awmod@divisor+1)^0,f,c
   955  0086' 3200'              	rrcf	___awmod@divisor^0,f,c
   956  0088' 2E00'              	decfsz	___awmod@counter^0,f,c
   957  008A' EF00' F000'        	goto	l1030
   958  008E'                    l1038:
   959  008E' 5000'              	movf	___awmod@sign^0,w,c
   960  0090' B4D8               	btfsc	status,2,c
   961  0092' EF00' F000'        	goto	u271
   962  0096' EF00' F000'        	goto	u270
   963  009A'                    u271:
   964  009A' EF00' F000'        	goto	l1042
   965  009E'                    u270:
   966  009E' 6C00'              	negf	___awmod@dividend^0,c
   967  00A0' 1E00'              	comf	(___awmod@dividend+1)^0,f,c
   968  00A2' B0D8               	btfsc	status,0,c
   969  00A4' 2A00'              	incf	(___awmod@dividend+1)^0,f,c
   970  00A6'                    l1042:
   971  00A6' C008' F008'        	movff	___awmod@dividend,?___awmod
   972  00AA' C009' F009'        	movff	___awmod@dividend+1,?___awmod+1
   973  00AE' 0012               	return		;funcret
   974  00B0'                    __end_of___awmod:
   975                           	callstack 0
   976                           
   977 ;; *************** function ___awdiv *****************
   978 ;; Defined at:
   979 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c99\common\awdiv.c"
   980 ;; Parameters:    Size  Location     Type
   981 ;;  dividend        2    0[COMRAM] int 
   982 ;;  divisor         2    2[COMRAM] int 
   983 ;; Auto vars:     Size  Location     Type
   984 ;;  quotient        2    6[COMRAM] int 
   985 ;;  sign            1    5[COMRAM] unsigned char 
   986 ;;  counter         1    4[COMRAM] unsigned char 
   987 ;; Return value:  Size  Location     Type
   988 ;;                  2    0[COMRAM] int 
   989 ;; Registers used:
   990 ;;		wreg, status,2, status,0
   991 ;; Tracked objects:
   992 ;;		On entry : 0/0
   993 ;;		On exit  : 0/0
   994 ;;		Unchanged: 0/0
   995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   996 ;;      Params:         4       0       0       0       0       0       0
   997 ;;      Locals:         4       0       0       0       0       0       0
   998 ;;      Temps:          0       0       0       0       0       0       0
   999 ;;      Totals:         8       0       0       0       0       0       0
  1000 ;;Total ram usage:        8 bytes
  1001 ;; Hardware stack levels used: 1
  1002 ;; This function calls:
  1003 ;;		Nothing
  1004 ;; This function is called by:
  1005 ;;		_Serial
  1006 ;;		_MostraDisplay
  1007 ;; This function uses a non-reentrant model
  1008 ;;
  1009                           
  1010                           	psect	text4
  1011  0000'                    __ptext4:
  1012                           	callstack 0
  1013  0000'                    ___awdiv:
  1014                           	callstack 29
  1015  0000' 0E00               	movlw	0
  1016  0002' 6E00'              	movwf	___awdiv@sign^0,c
  1017  0004' BE00'              	btfsc	(___awdiv@divisor+1)^0,7,c
  1018  0006' EF00' F000'        	goto	u160
  1019  000A' EF00' F000'        	goto	u161
  1020  000E'                    u161:
  1021  000E' EF00' F000'        	goto	l974
  1022  0012'                    u160:
  1023  0012' 6C00'              	negf	___awdiv@divisor^0,c
  1024  0014' 1E00'              	comf	(___awdiv@divisor+1)^0,f,c
  1025  0016' B0D8               	btfsc	status,0,c
  1026  0018' 2A00'              	incf	(___awdiv@divisor+1)^0,f,c
  1027  001A' 0E01               	movlw	1
  1028  001C' 6E00'              	movwf	___awdiv@sign^0,c
  1029  001E'                    l974:
  1030  001E' BE00'              	btfsc	(___awdiv@dividend+1)^0,7,c
  1031  0020' EF00' F000'        	goto	u170
  1032  0024' EF00' F000'        	goto	u171
  1033  0028'                    u171:
  1034  0028' EF00' F000'        	goto	l980
  1035  002C'                    u170:
  1036  002C' 6C00'              	negf	___awdiv@dividend^0,c
  1037  002E' 1E00'              	comf	(___awdiv@dividend+1)^0,f,c
  1038  0030' B0D8               	btfsc	status,0,c
  1039  0032' 2A00'              	incf	(___awdiv@dividend+1)^0,f,c
  1040  0034' 0E01               	movlw	1
  1041  0036' 1A00'              	xorwf	___awdiv@sign^0,f,c
  1042  0038'                    l980:
  1043  0038' 0E00               	movlw	0
  1044  003A' 6E00'              	movwf	(___awdiv@quotient+1)^0,c
  1045  003C' 0E00               	movlw	0
  1046  003E' 6E00'              	movwf	___awdiv@quotient^0,c
  1047  0040' 5000'              	movf	___awdiv@divisor^0,w,c
  1048  0042' 1000'              	iorwf	(___awdiv@divisor+1)^0,w,c
  1049  0044' B4D8               	btfsc	status,2,c
  1050  0046' EF00' F000'        	goto	u181
  1051  004A' EF00' F000'        	goto	u180
  1052  004E'                    u181:
  1053  004E' EF00' F000'        	goto	l1002
  1054  0052'                    u180:
  1055  0052' 0E01               	movlw	1
  1056  0054' 6E00'              	movwf	___awdiv@counter^0,c
  1057  0056' EF00' F000'        	goto	l988
  1058  005A'                    l986:
  1059  005A' 90D8               	bcf	status,0,c
  1060  005C' 3600'              	rlcf	___awdiv@divisor^0,f,c
  1061  005E' 3600'              	rlcf	(___awdiv@divisor+1)^0,f,c
  1062  0060' 2A00'              	incf	___awdiv@counter^0,f,c
  1063  0062'                    l988:
  1064  0062' AE00'              	btfss	(___awdiv@divisor+1)^0,7,c
  1065  0064' EF00' F000'        	goto	u191
  1066  0068' EF00' F000'        	goto	u190
  1067  006C'                    u191:
  1068  006C' EF00' F000'        	goto	l986
  1069  0070'                    u190:
  1070  0070'                    l990:
  1071  0070' 90D8               	bcf	status,0,c
  1072  0072' 3600'              	rlcf	___awdiv@quotient^0,f,c
  1073  0074' 3600'              	rlcf	(___awdiv@quotient+1)^0,f,c
  1074  0076' 5000'              	movf	___awdiv@divisor^0,w,c
  1075  0078' 5C00'              	subwf	___awdiv@dividend^0,w,c
  1076  007A' 5000'              	movf	(___awdiv@divisor+1)^0,w,c
  1077  007C' 5800'              	subwfb	(___awdiv@dividend+1)^0,w,c
  1078  007E' A0D8               	btfss	status,0,c
  1079  0080' EF00' F000'        	goto	u201
  1080  0084' EF00' F000'        	goto	u200
  1081  0088'                    u201:
  1082  0088' EF00' F000'        	goto	l998
  1083  008C'                    u200:
  1084  008C' 5000'              	movf	___awdiv@divisor^0,w,c
  1085  008E' 5E00'              	subwf	___awdiv@dividend^0,f,c
  1086  0090' 5000'              	movf	(___awdiv@divisor+1)^0,w,c
  1087  0092' 5A00'              	subwfb	(___awdiv@dividend+1)^0,f,c
  1088  0094' 8000'              	bsf	___awdiv@quotient^0,0,c
  1089  0096'                    l998:
  1090  0096' 90D8               	bcf	status,0,c
  1091  0098' 3200'              	rrcf	(___awdiv@divisor+1)^0,f,c
  1092  009A' 3200'              	rrcf	___awdiv@divisor^0,f,c
  1093  009C' 2E00'              	decfsz	___awdiv@counter^0,f,c
  1094  009E' EF00' F000'        	goto	l990
  1095  00A2'                    l1002:
  1096  00A2' 5000'              	movf	___awdiv@sign^0,w,c
  1097  00A4' B4D8               	btfsc	status,2,c
  1098  00A6' EF00' F000'        	goto	u211
  1099  00AA' EF00' F000'        	goto	u210
  1100  00AE'                    u211:
  1101  00AE' EF00' F000'        	goto	l1006
  1102  00B2'                    u210:
  1103  00B2' 6C00'              	negf	___awdiv@quotient^0,c
  1104  00B4' 1E00'              	comf	(___awdiv@quotient+1)^0,f,c
  1105  00B6' B0D8               	btfsc	status,0,c
  1106  00B8' 2A00'              	incf	(___awdiv@quotient+1)^0,f,c
  1107  00BA'                    l1006:
  1108  00BA' C006' F000'        	movff	___awdiv@quotient,?___awdiv
  1109  00BE' C007' F001'        	movff	___awdiv@quotient+1,?___awdiv+1
  1110  00C2' 0012               	return		;funcret
  1111  00C4'                    __end_of___awdiv:
  1112                           	callstack 0
  1113                           
  1114 ;; *************** function _LeTeclado *****************
  1115 ;; Defined at:
  1116 ;;		line 20 in file "main.c"
  1117 ;; Parameters:    Size  Location     Type
  1118 ;;		None
  1119 ;; Auto vars:     Size  Location     Type
  1120 ;;		None
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, btemp, btemp+1, btemp+2, b
      +temp+3, btemp+4, btemp+5, btemp+6, btemp+7, btemp+8, btemp+9, btemp+10, btemp+11, btemp+12, btemp+13, btemp+14, btemp+15
      +, btemp+16, btemp+17, btemp+18, btemp+19, btemp+20, btemp+21, btemp+22, btemp+23, btemp+24, btemp+25, btemp+26, btemp+27
      +, btemp+28, btemp+29, btemp+30, btemp+31, tosl, structret, tblptrl, tblptrh, tblptru, prodl, prodh, bsr, cstack
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1130 ;;      Params:         0       0       0       0       0       0       0
  1131 ;;      Locals:         0       0       0       0       0       0       0
  1132 ;;      Temps:          2       0       0       0       0       0       0
  1133 ;;      Totals:         2       0       0       0       0       0       0
  1134 ;;Total ram usage:        2 bytes
  1135 ;; Hardware stack levels used: 1
  1136 ;; Hardware stack levels required when called: 1
  1137 ;; This function calls:
  1138 ;;		_kpRead
  1139 ;;		_kpReadKey
  1140 ;;		_lcdCommand
  1141 ;;		_lcdString
  1142 ;;		_ssdDigit
  1143 ;; This function is called by:
  1144 ;;		_main
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           	psect	text5
  1149  0000'                    __ptext5:
  1150                           	callstack 0
  1151  0000'                    _LeTeclado:
  1152                           	callstack 29
  1153  0000'                    
  1154                           ;main.c: 21:     if(kpRead() != Leitura){
  1155  0000' EC00' F000'        	call	_kpRead	;wreg free
  1156  0004' 5000'              	movf	_Leitura^0,w,c
  1157  0006' 1800'              	xorwf	?_kpRead^0,w,c
  1158  0008' E109               	bnz	u280
  1159  000A' 5000'              	movf	(_Leitura+1)^0,w,c
  1160  000C' 1800'              	xorwf	(?_kpRead+1)^0,w,c
  1161  000E' B4D8               	btfsc	status,2,c
  1162  0010' EF00' F000'        	goto	u281
  1163  0014' EF00' F000'        	goto	u280
  1164  0018'                    u281:
  1165  0018' EF00' F000'        	goto	l54
  1166  001C'                    u280:
  1167  001C'                    
  1168                           ;main.c: 22:         Leitura = kpRead();
  1169  001C' EC00' F000'        	call	_kpRead	;wreg free
  1170  0020' C000' F000'        	movff	?_kpRead,_Leitura
  1171  0024' C001' F001'        	movff	?_kpRead+1,_Leitura+1
  1172                           
  1173                           ;main.c: 24:         switch(kpReadKey()){
  1174  0028' EF00' F000'        	goto	l1078
  1175  002C'                    l1050:
  1176                           
  1177                           ;main.c: 26:                 lcdCommand(0x80);
  1178  002C' 0E80               	movlw	128
  1179  002E' EC00' F000'        	call	_lcdCommand
  1180                           
  1181                           ;main.c: 27:                 lcdString("Bruno");
  1182  0032' 0E00'              	movlw	low STR_1
  1183  0034' 6E00'              	movwf	_lcdString$0^0,c
  1184  0036' 0E00'              	movlw	high STR_1
  1185  0038' 6E00'              	movwf	(_lcdString$0+1)^0,c
  1186  003A' EC00' F000'        	call	_lcdString	;wreg free
  1187                           
  1188                           ;main.c: 28:                 break;
  1189  003E' EF00' F000'        	goto	l54
  1190  0042'                    l1052:
  1191                           
  1192                           ;main.c: 30:                 lcdCommand(0xC0);
  1193  0042' 0EC0               	movlw	192
  1194  0044' EC00' F000'        	call	_lcdCommand
  1195                           
  1196                           ;main.c: 31:                 lcdString("2021002510");
  1197  0048' 0E00'              	movlw	low STR_2
  1198  004A' 6E00'              	movwf	_lcdString$0^0,c
  1199  004C' 0E00'              	movlw	high STR_2
  1200  004E' 6E00'              	movwf	(_lcdString$0+1)^0,c
  1201  0050' EC00' F000'        	call	_lcdString	;wreg free
  1202                           
  1203                           ;main.c: 32:                 break;
  1204  0054' EF00' F000'        	goto	l54
  1205  0058'                    l1054:
  1206                           
  1207                           ;main.c: 34:                 Flag = 2;
  1208  0058' 0E02               	movlw	2
  1209  005A' 6E00'              	movwf	_Flag^0,c
  1210  005C'                    
  1211                           ;main.c: 36:                 ssdDigit(14, 0);
  1212  005C' 0E00               	movlw	0
  1213  005E' 6E00'              	movwf	_ssdDigit$1^0,c
  1214  0060' 0E0E               	movlw	14
  1215  0062' EC00' F000'        	call	_ssdDigit
  1216  0066'                    
  1217                           ;main.c: 37:                 ssdDigit(12, 1);
  1218  0066' 0E01               	movlw	1
  1219  0068' 6E00'              	movwf	_ssdDigit$1^0,c
  1220  006A' 0E0C               	movlw	12
  1221  006C' EC00' F000'        	call	_ssdDigit
  1222  0070'                    
  1223                           ;main.c: 38:                 ssdDigit( 0, 2);
  1224  0070' 0E02               	movlw	2
  1225  0072' 6E00'              	movwf	_ssdDigit$1^0,c
  1226  0074' 0E00               	movlw	0
  1227  0076' EC00' F000'        	call	_ssdDigit
  1228  007A'                    
  1229                           ;main.c: 39:                 ssdDigit(16, 3);
  1230  007A' 0E03               	movlw	3
  1231  007C' 6E00'              	movwf	_ssdDigit$1^0,c
  1232  007E' 0E10               	movlw	16
  1233  0080' EC00' F000'        	call	_ssdDigit
  1234                           
  1235                           ;main.c: 40:                 break;
  1236  0084' EF00' F000'        	goto	l54
  1237  0088'                    l1064:
  1238                           
  1239                           ;main.c: 42:                 Flag = 1;
  1240  0088' 0E01               	movlw	1
  1241  008A' 6E00'              	movwf	_Flag^0,c
  1242  008C'                    
  1243                           ;main.c: 44:                 ssdDigit(16, 0);
  1244  008C' 0E00               	movlw	0
  1245  008E' 6E00'              	movwf	_ssdDigit$1^0,c
  1246  0090' 0E10               	movlw	16
  1247  0092' EC00' F000'        	call	_ssdDigit
  1248  0096'                    
  1249                           ;main.c: 45:                 ssdDigit(16, 1);
  1250  0096' 0E01               	movlw	1
  1251  0098' 6E00'              	movwf	_ssdDigit$1^0,c
  1252  009A' 0E10               	movlw	16
  1253  009C' EC00' F000'        	call	_ssdDigit
  1254  00A0'                    
  1255                           ;main.c: 46:                 ssdDigit(16, 2);
  1256  00A0' 0E02               	movlw	2
  1257  00A2' 6E00'              	movwf	_ssdDigit$1^0,c
  1258  00A4' 0E10               	movlw	16
  1259  00A6' EC00' F000'        	call	_ssdDigit
  1260  00AA'                    
  1261                           ;main.c: 47:                 ssdDigit(16, 3);
  1262  00AA' 0E03               	movlw	3
  1263  00AC' 6E00'              	movwf	_ssdDigit$1^0,c
  1264  00AE' 0E10               	movlw	16
  1265  00B0' EC00' F000'        	call	_ssdDigit
  1266                           
  1267                           ;main.c: 48:                 break;
  1268  00B4' EF00' F000'        	goto	l54
  1269  00B8'                    l1074:
  1270                           
  1271                           ;main.c: 50:                 lcdCommand(0x01);
  1272  00B8' 0E01               	movlw	1
  1273  00BA' EC00' F000'        	call	_lcdCommand
  1274                           
  1275                           ;main.c: 51:                 break;
  1276  00BE' EF00' F000'        	goto	l54
  1277  00C2'                    l1078:
  1278  00C2' EC00' F000'        	call	_kpReadKey	;wreg free
  1279  00C6' 6E00'              	movwf	??_LeTeclado^0,c
  1280  00C8' 6A00'              	clrf	(??_LeTeclado+1)^0,c
  1281                           
  1282                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1283                           ; Switch size 1, requested type "simple"
  1284                           ; Number of cases is 1, Range of values is 0 to 0
  1285                           ; switch strategies available:
  1286                           ; Name         Instructions Cycles
  1287                           ; simple_byte            4     3 (average)
  1288                           ;	Chosen strategy is simple_byte
  1289  00CA' 5000'              	movf	(??_LeTeclado+1)^0,w,c
  1290  00CC' 0A00               	xorlw	0	; case 0
  1291  00CE' B4D8               	btfsc	status,2,c
  1292  00D0' EF00' F000'        	goto	l1176
  1293  00D4' EF00' F000'        	goto	l54
  1294  00D8'                    l1176:
  1295                           
  1296                           ; Switch size 1, requested type "simple"
  1297                           ; Number of cases is 5, Range of values is 68 to 85
  1298                           ; switch strategies available:
  1299                           ; Name         Instructions Cycles
  1300                           ; simple_byte           16     9 (average)
  1301                           ;	Chosen strategy is simple_byte
  1302  00D8' 5000'              	movf	??_LeTeclado^0,w,c
  1303  00DA' 0A44               	xorlw	68	; case 68
  1304  00DC' B4D8               	btfsc	status,2,c
  1305  00DE' EF00' F000'        	goto	l1054
  1306  00E2' 0A08               	xorlw	8	; case 76
  1307  00E4' B4D8               	btfsc	status,2,c
  1308  00E6' EF00' F000'        	goto	l1052
  1309  00EA' 0A1E               	xorlw	30	; case 82
  1310  00EC' B4D8               	btfsc	status,2,c
  1311  00EE' EF00' F000'        	goto	l1064
  1312  00F2' 0A01               	xorlw	1	; case 83
  1313  00F4' B4D8               	btfsc	status,2,c
  1314  00F6' EF00' F000'        	goto	l1074
  1315  00FA' 0A06               	xorlw	6	; case 85
  1316  00FC' B4D8               	btfsc	status,2,c
  1317  00FE' EF00' F000'        	goto	l1050
  1318  0102' EF00' F000'        	goto	l54
  1319  0106'                    l54:
  1320  0106' 0012               	return		;funcret
  1321  0108'                    __end_of_LeTeclado:
  1322                           	callstack 0
  1323                           
  1324                           	psect	rparam
  1325  0000                     
  1326                           	psect	idloc
  1327                           
  1328                           ;Config register IDLOC0 @ 0x200000
  1329                           ;	unspecified, using default values
  1330  200000                     	org	2097152
  1331  200000  FF                 	db	255
  1332                           
  1333                           ;Config register IDLOC1 @ 0x200001
  1334                           ;	unspecified, using default values
  1335  200001                     	org	2097153
  1336  200001  FF                 	db	255
  1337                           
  1338                           ;Config register IDLOC2 @ 0x200002
  1339                           ;	unspecified, using default values
  1340  200002                     	org	2097154
  1341  200002  FF                 	db	255
  1342                           
  1343                           ;Config register IDLOC3 @ 0x200003
  1344                           ;	unspecified, using default values
  1345  200003                     	org	2097155
  1346  200003  FF                 	db	255
  1347                           
  1348                           ;Config register IDLOC4 @ 0x200004
  1349                           ;	unspecified, using default values
  1350  200004                     	org	2097156
  1351  200004  FF                 	db	255
  1352                           
  1353                           ;Config register IDLOC5 @ 0x200005
  1354                           ;	unspecified, using default values
  1355  200005                     	org	2097157
  1356  200005  FF                 	db	255
  1357                           
  1358                           ;Config register IDLOC6 @ 0x200006
  1359                           ;	unspecified, using default values
  1360  200006                     	org	2097158
  1361  200006  FF                 	db	255
  1362                           
  1363                           ;Config register IDLOC7 @ 0x200007
  1364                           ;	unspecified, using default values
  1365  200007                     	org	2097159
  1366  200007  FF                 	db	255
  1367                           
  1368                           	psect	config
  1369                           
  1370                           ; Padding undefined space
  1371  300000                     	org	3145728
  1372  300000  FF                 	db	255
  1373                           
  1374                           ;Config register CONFIG1H @ 0x300001
  1375                           ;	Oscillator Selection bits
  1376                           ;	OSC = HS, HS oscillator
  1377                           ;	Fail-Safe Clock Monitor Enable bit
  1378                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1379                           ;	Internal/External Oscillator Switchover bit
  1380                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1381  300001                     	org	3145729
  1382  300001  02                 	db	2
  1383                           
  1384                           ;Config register CONFIG2L @ 0x300002
  1385                           ;	Power-up Timer Enable bit
  1386                           ;	PWRT = OFF, PWRT disabled
  1387                           ;	Brown-out Reset Enable bits
  1388                           ;	BOREN = OFF, Brown-out Reset disabled in hardware and software
  1389                           ;	Brown Out Reset Voltage bits
  1390                           ;	BORV = 0x2E, user specified literal
  1391  300002                     	org	3145730
  1392  300002  71                 	db	369
  1393                           
  1394                           ;Config register CONFIG2H @ 0x300003
  1395                           ;	Watchdog Timer Enable bit
  1396                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1397                           ;	Watchdog Timer Postscale Select bits
  1398                           ;	WDTPS = 1, 1:1
  1399  300003                     	org	3145731
  1400  300003  00                 	db	0
  1401                           
  1402                           ; Padding undefined space
  1403  300004                     	org	3145732
  1404  300004  FF                 	db	255
  1405                           
  1406                           ;Config register CONFIG3H @ 0x300005
  1407                           ;	CCP2 MUX bit
  1408                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
  1409                           ;	PORTB A/D Enable bit
  1410                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
  1411                           ;	Low-Power Timer1 Oscillator Enable bit
  1412                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1413                           ;	MCLR Pin Enable bit
  1414                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  1415  300005                     	org	3145733
  1416  300005  83                 	db	131
  1417                           
  1418                           ;Config register CONFIG4L @ 0x300006
  1419                           ;	Stack Full/Underflow Reset Enable bit
  1420                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1421                           ;	Single-Supply ICSP Enable bit
  1422                           ;	LVP = OFF, Single-Supply ICSP disabled
  1423                           ;	Extended Instruction Set Enable bit
  1424                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1425                           ;	Background Debugger Enable bit
  1426                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  1427  300006                     	org	3145734
  1428  300006  80                 	db	128
  1429                           
  1430                           ; Padding undefined space
  1431  300007                     	org	3145735
  1432  300007  FF                 	db	255
  1433                           
  1434                           ;Config register CONFIG5L @ 0x300008
  1435                           ;	Code Protection bit
  1436                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1437                           ;	Code Protection bit
  1438                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1439                           ;	Code Protection bit
  1440                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1441                           ;	Code Protection bit
  1442                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1443  300008                     	org	3145736
  1444  300008  0F                 	db	15
  1445                           
  1446                           ;Config register CONFIG5H @ 0x300009
  1447                           ;	Boot Block Code Protection bit
  1448                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1449                           ;	Data EEPROM Code Protection bit
  1450                           ;	CPD = OFF, Data EEPROM not code-protected
  1451  300009                     	org	3145737
  1452  300009  C0                 	db	192
  1453                           
  1454                           ;Config register CONFIG6L @ 0x30000A
  1455                           ;	Write Protection bit
  1456                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1457                           ;	Write Protection bit
  1458                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1459                           ;	Write Protection bit
  1460                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1461                           ;	Write Protection bit
  1462                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1463  30000A                     	org	3145738
  1464  30000A  0F                 	db	15
  1465                           
  1466                           ;Config register CONFIG6H @ 0x30000B
  1467                           ;	Configuration Register Write Protection bit
  1468                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1469                           ;	Boot Block Write Protection bit
  1470                           ;	WRTB = OFF, Boot block (000000-0007FFh) not write-protected
  1471                           ;	Data EEPROM Write Protection bit
  1472                           ;	WRTD = OFF, Data EEPROM not write-protected
  1473  30000B                     	org	3145739
  1474  30000B  E0                 	db	224
  1475                           
  1476                           ;Config register CONFIG7L @ 0x30000C
  1477                           ;	Table Read Protection bit
  1478                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1479                           ;	Table Read Protection bit
  1480                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1481                           ;	Table Read Protection bit
  1482                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1483                           ;	Table Read Protection bit
  1484                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1485  30000C                     	org	3145740
  1486  30000C  0F                 	db	15
  1487                           
  1488                           ;Config register CONFIG7H @ 0x30000D
  1489                           ;	Boot Block Table Read Protection bit
  1490                           ;	EBTRB = OFF, Boot block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1491  30000D                     	org	3145741
  1492  30000D  40                 	db	64
  1493                           tosu	equ	0xFFF
  1494                           tosh	equ	0xFFE
  1495                           tosl	equ	0xFFD
  1496                           stkptr	equ	0xFFC
  1497                           pclatu	equ	0xFFB
  1498                           pclath	equ	0xFFA
  1499                           pcl	equ	0xFF9
  1500                           tblptru	equ	0xFF8
  1501                           tblptrh	equ	0xFF7
  1502                           tblptrl	equ	0xFF6
  1503                           tablat	equ	0xFF5
  1504                           prodh	equ	0xFF4
  1505                           prodl	equ	0xFF3
  1506                           indf0	equ	0xFEF
  1507                           postinc0	equ	0xFEE
  1508                           postdec0	equ	0xFED
  1509                           preinc0	equ	0xFEC
  1510                           plusw0	equ	0xFEB
  1511                           fsr0h	equ	0xFEA
  1512                           fsr0l	equ	0xFE9
  1513                           wreg	equ	0xFE8
  1514                           indf1	equ	0xFE7
  1515                           postinc1	equ	0xFE6
  1516                           postdec1	equ	0xFE5
  1517                           preinc1	equ	0xFE4
  1518                           plusw1	equ	0xFE3
  1519                           fsr1h	equ	0xFE2
  1520                           fsr1l	equ	0xFE1
  1521                           bsr	equ	0xFE0
  1522                           indf2	equ	0xFDF
  1523                           postinc2	equ	0xFDE
  1524                           postdec2	equ	0xFDD
  1525                           preinc2	equ	0xFDC
  1526                           plusw2	equ	0xFDB
  1527                           fsr2h	equ	0xFDA
  1528                           fsr2l	equ	0xFD9
  1529                           status	equ	0xFD8

Data Sizes:
    Strings     17
    Constant    0
    Data        1
    BSS         4
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     20      25
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    lcdString$0	PTR unsigned char  size(2) Largest target is 11
		 -> STR_4(CODE[11]), STR_3(CODE[6]), STR_2(CODE[11]), STR_1(CODE[6]), 


Critical Paths under _main in COMRAM

    _main->_Serial
    _Serial->___awmod
    _MostraDisplay->___awmod
    ___awmod->___awdiv

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    6792
                                             17 COMRAM     3     3      0
                          _LeTeclado
                      _MostraDisplay
                             _Serial
                            _adcInit
                         _kpDebounce
                             _kpInit
                         _lcdCommand
                            _lcdInit
                         _serialInit
                           _ssdDigit
                            _ssdInit
                          _ssdUpdate
                          _timerInit
                         _timerReset
                          _timerWait
 ---------------------------------------------------------------------------------
 (1) _timerWait                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timerReset                                           2     0      2      12
 ---------------------------------------------------------------------------------
 (1) _timerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ssdUpdate                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ssdInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _serialInit                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _kpDebounce                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adcInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Serial                                               3     3      0    3117
                                             14 COMRAM     3     3      0
                            ___awdiv
                            ___awmod
                            _adcRead
                         _lcdCommand
                          _lcdString
                         _serialRead
                         _serialSend
                           _ssdDigit
 ---------------------------------------------------------------------------------
 (2) _serialSend                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _serialRead                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _adcRead                                              2     0      2      12
 ---------------------------------------------------------------------------------
 (1) _MostraDisplay                                        0     0      0    3012
                            ___awdiv
                            ___awmod
                           _ssdDigit
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4    1512
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1212
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (1) _LeTeclado                                            2     2      0     336
                                              0 COMRAM     2     2      0
                             _kpRead
                          _kpReadKey
                         _lcdCommand
                          _lcdString
                           _ssdDigit
 ---------------------------------------------------------------------------------
 (1) _ssdDigit                                             1     0      1     288
 ---------------------------------------------------------------------------------
 (2) _lcdString                                            2     0      2      48
 ---------------------------------------------------------------------------------
 (1) _lcdCommand                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _kpReadKey                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LeTeclado
     _kpRead
     _kpReadKey
     _lcdCommand
     _lcdString
     _ssdDigit
   _MostraDisplay
     ___awdiv
     ___awmod
       ___awdiv (ARG)
     _ssdDigit
   _Serial
     ___awdiv
     ___awmod
     _adcRead
     _lcdCommand
     _lcdString
     _serialRead
     _serialSend
     _ssdDigit
   _adcInit
   _kpDebounce
   _kpInit
   _lcdCommand
   _lcdInit
   _serialInit
   _ssdDigit
   _ssdInit
   _ssdUpdate
   _timerInit
   _timerReset
   _timerWait

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     14      19       1       19.7%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      19      15        0.0%
DATA                 0      0      19       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Dec 13 18:45:23 2021

                     l54 000106                       l66 0001CA                       l74 000046  
                     l69 0000B4             ___awdiv@sign 000005                      l331 0000AE  
                    l318 0000C2                      l970 000012                      l980 000038  
                    l972 00001A                      l990 000070                      l982 000040  
                    l974 00001E                      l966 000000                      l992 000076  
                    l984 000052                      l976 00002C                      l968 000004  
                    l994 00008C                      l986 00005A                      l978 000034  
                    l996 000094                      l988 000062                      l998 000096  
                    u200 00008C                      u201 000088                      u210 0000B2  
                    u211 0000AE                      u220 000012                      u300 00008E  
                    u221 00000E                      u301 00008A                      u230 00002C  
                    u231 000028                      u160 000012                      u240 000046  
                    u161 00000E                      u241 000042                      u170 00002C  
                    u250 000064                      u171 000028                      u251 000060  
                    u180 000052                      u260 00007A                      u181 00004E  
                    u261 000076                      u190 000070                      u270 00009E  
                    u191 00006C                      u271 00009A                      u280 00001C  
                    u281 000018                      u290 000016                      u291 000012  
           ___awmod@sign 00000D                     l1000 00009C                     l1002 0000A2  
                   l1010 000000                     l1004 0000B2                     l1020 00002C  
                   l1012 000004                     l1100 00005E                     l1006 0000BA  
                   l1030 000064                     l1022 000034                     l1014 000012  
                   l1110 00008E                     l1102 000068                     l1040 00009E  
                   l1032 00007A                     l1024 000046                     l1016 00001A  
                   l1112 000098                     l1104 000076                     l1120 0000F2  
                   l1050 00002C                     l1042 0000A6                     l1034 000082  
                   l1026 00004E                     l1018 00001E                     l1114 0000A6  
                   l1106 00007A                     l1130 00005A                     l1060 000070  
                   l1052 000042                     l1036 000088                     l1028 000056  
                   l1108 000084                     l1140 000076                     l1132 00005E  
                   l1070 0000A0                     l1062 00007A                     l1054 000058  
                   l1046 000000                     l1038 00008E                     l1126 000000  
                   l1118 0000B0                     l1142 00007E                     l1134 000066  
                   l1072 0000AA                     l1064 000088                     l1056 00005C  
                   l1048 00001C                     l1144 00008E                     l1136 00006A  
                   l1152 00009A                     l1128 000000                     l1074 0000B8  
                   l1066 00008C                     l1058 000066                     l1090 00001A  
                   l1146 000092                     l1138 000072                     l1154 0000D4  
                   l1068 000096                     l1092 000030                     l1084 000000  
                   l1172 0000AE                     l1078 0000C2                     l1174 0000C4  
                   l1094 000046                     l1086 000006                     l1176 0000D8  
                   l1096 00004A                     l1098 000054                     STR_1 00000C  
                   STR_2 000001                     STR_3 000000                     STR_4 000000  
                   _Flag 000000                     _main 000000                     start 000000* 
           ___param_bank 000000                    ?_main 000000          __end_of___awdiv 0000C4  
        __end_of___awmod 0000B0          ___awdiv@divisor 000002          ___awdiv@counter 000004  
                  tablat 000FF5                    status 000FD8          __initialization 000000  
           __end_of_main 0000E0                   ??_main 000011       __size_of_LeTeclado 000000  
          __activetblptr 000002    __end_of_MostraDisplay 0000B6         ___awdiv@dividend 000000  
                 _Serial 000000                ??_adcInit 000000                ??_adcRead 000000  
              ??___awdiv 000004                ??___awmod 00000C                   _kpInit 000000* 
                 _kpRead 000000*        ___awdiv@quotient 000006          ___awmod@divisor 00000A  
                 isa$std 000001                ??_lcdInit 000000          ___awmod@counter 00000C  
           __pdataCOMRAM 000000             __mediumconst 000000*                  tblptrh 000FF7  
                 tblptrl 000FF6                   tblptru 000FF8                ??_ssdInit 000000  
             __accesstop 000000* __end_of__initialization 00001A        __end_of_LeTeclado 000108  
          ___rparam_used 000001           __pcstackCOMRAM 000000              Serial@Tecla 000010  
                ?_Serial 000000               _lcdCommand 000000*                 ?_kpInit 000000  
                ?_kpRead 000000               _kpDebounce 000000*                 _Leitura 000000  
                __Hparam 000000                  __Lparam 000000                ?_ssdDigit 000000  
                _ValorAD 000002          __size_of_Serial 000000                  _adcInit 000000* 
                _adcRead 000000*                 ___awdiv 000000                  ___awmod 000000  
           __psmallconst 000000                  __pcinit 000000                  __ramtop 000000* 
                _lcdInit 000000*                 __ptext0 000000                  __ptext1 000000  
                __ptext2 000000                  __ptext3 000000                  __ptext4 000000  
                __ptext5 000000         ___awmod@dividend 000008                  _ssdInit 000000* 
   end_of_initialization 00001A            __Lmediumconst 000000*              _ssdDigit$1 000000  
             _serialInit 000000*              _serialRead 000000*              ??_ssdDigit 000000  
             _serialSend 000000*             ?_lcdCommand 000000               _timerReset 000000* 
            ?_kpDebounce 000000                _LeTeclado 000000           __end_of_Serial 0001CC  
 __size_of_MostraDisplay 000000            __pidataCOMRAM 000000      start_initialization 000000  
            ?_serialInit 000000              ?_serialRead 000000              ?_serialSend 000000  
               ??_Serial 00000E               ?_LeTeclado 000000                 ??_kpInit 000000  
               ??_kpRead 000000              ?_timerReset 000000                _adcRead$0 000000  
            __pbssCOMRAM 000000            _MostraDisplay 000000                 ?_adcInit 000000  
               ?_adcRead 000000                 ?___awdiv 000000                 ?___awmod 000008  
              _lcdString 000000*                ?_lcdInit 000000                _kpReadKey 000000* 
            __smallconst 000000*                ?_ssdInit 000000           ?_MostraDisplay 000000  
            _lcdString$0 000000              ??_LeTeclado 000000             ??_lcdCommand 000000  
              _timerInit 000000*               _timerWait 000000*               _ssdUpdate 000000* 
             ?_lcdString 000000             ??_kpDebounce 000000               ?_kpReadKey 000000  
               __Hrparam 000000*                __Lrparam 000000*              ?_timerInit 000000  
             ?_timerWait 000000               ?_ssdUpdate 000000         __size_of___awdiv 000000  
       __size_of___awmod 000000          ??_MostraDisplay 00000E            __size_of_main 000000  
           ??_serialInit 000000             ??_serialRead 000000             ??_serialSend 000000  
               _ssdDigit 000000*                isa$xinst 000000              ??_lcdString 000000  
           ??_timerReset 000000                 main@slot 000013              ??_kpReadKey 000000  
           _timerReset$0 000000              ??_timerInit 000000              ??_timerWait 000000  
            ??_ssdUpdate 000000  
